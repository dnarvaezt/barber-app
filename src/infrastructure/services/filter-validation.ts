import { PaginationMockService } from './pagination-mock.service'

// Datos de prueba
const mockClients = [
  {
    id: '1',
    name: 'Juan P√©rez',
    phoneNumber: '+573001234567',
    birthDate: new Date('1990-05-15'),
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    createdBy: 'admin',
    updatedBy: 'admin',
  },
  {
    id: '2',
    name: 'Mar√≠a Garc√≠a',
    phoneNumber: '+573001234568',
    birthDate: new Date('1985-08-22'),
    createdAt: new Date('2024-01-20'),
    updatedAt: new Date('2024-01-20'),
    createdBy: 'admin',
    updatedBy: 'admin',
  },
  {
    id: '3',
    name: 'Carlos L√≥pez',
    phoneNumber: '+573001234569',
    birthDate: new Date('1995-03-10'),
    createdAt: new Date('2024-02-01'),
    updatedAt: new Date('2024-02-01'),
    createdBy: 'admin',
    updatedBy: 'admin',
  },
  {
    id: '4',
    name: 'Ana Rodr√≠guez',
    phoneNumber: '+573001234570',
    birthDate: new Date('1988-12-05'),
    createdAt: new Date('2024-02-15'),
    updatedAt: new Date('2024-02-15'),
    createdBy: 'admin',
    updatedBy: 'admin',
  },
  {
    id: '5',
    name: 'Luis Mart√≠nez',
    phoneNumber: '+573001234571',
    birthDate: new Date('1992-07-18'),
    createdAt: new Date('2024-03-01'),
    updatedAt: new Date('2024-03-01'),
    createdBy: 'admin',
    updatedBy: 'admin',
  },
  {
    id: '6',
    name: 'Sof√≠a P√©rez',
    phoneNumber: '+573001234572',
    birthDate: new Date('1993-05-20'),
    createdAt: new Date('2024-03-10'),
    updatedAt: new Date('2024-03-10'),
    createdBy: 'admin',
    updatedBy: 'admin',
  },
  {
    id: '7',
    name: 'Diego Gonz√°lez',
    phoneNumber: '+573001234573',
    birthDate: new Date('1987-11-12'),
    createdAt: new Date('2024-03-15'),
    updatedAt: new Date('2024-03-15'),
    createdBy: 'admin',
    updatedBy: 'admin',
  },
  {
    id: '8',
    name: 'Carmen P√©rez',
    phoneNumber: '+573001234574',
    birthDate: new Date('1965-05-08'),
    createdAt: new Date('2024-03-20'),
    updatedAt: new Date('2024-03-20'),
    createdBy: 'admin',
    updatedBy: 'admin',
  },
]

/**
 * Valida que el sistema de filtros est√© funcionando correctamente
 */
export const validateFilterSystem = () => {
  console.log('üß™ VALIDACI√ìN DEL SISTEMA DE FILTROS')
  console.log('=====================================\n')

  const pagination = { page: 1, limit: 50 }
  let allTestsPassed = true

  // Test 1: B√∫squeda por nombre
  console.log('üìù Test 1: B√∫squeda por nombre "Juan"')
  const test1 = PaginationMockService.searchWithPagination(
    mockClients,
    'Juan',
    pagination
  )
  const expected1 = 1 // Solo Juan P√©rez
  if (test1.data.length === expected1) {
    console.log('‚úÖ PAS√ì - Encontrados:', test1.data.length, 'resultados')
    console.log(
      '   Resultados:',
      test1.data.map(c => c.name)
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected1,
      'Encontrados:',
      test1.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 2: B√∫squeda por apellido
  console.log('üìù Test 2: B√∫squeda por apellido "P√©rez"')
  const test2 = PaginationMockService.searchWithPagination(
    mockClients,
    'P√©rez',
    pagination
  )
  const expected2 = 3 // Juan P√©rez, Sof√≠a P√©rez, Carmen P√©rez
  if (test2.data.length === expected2) {
    console.log('‚úÖ PAS√ì - Encontrados:', test2.data.length, 'resultados')
    console.log(
      '   Resultados:',
      test2.data.map(c => c.name)
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected2,
      'Encontrados:',
      test2.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 3: B√∫squeda por n√∫mero de tel√©fono
  console.log('üìù Test 3: B√∫squeda por n√∫mero "3001234567"')
  const test3 = PaginationMockService.searchWithPagination(
    mockClients,
    '3001234567',
    pagination
  )
  const expected3 = 1 // Solo Juan P√©rez
  if (test3.data.length === expected3) {
    console.log('‚úÖ PAS√ì - Encontrados:', test3.data.length, 'resultados')
    console.log(
      '   Resultados:',
      test3.data.map(c => `${c.name} - ${c.phoneNumber}`)
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected3,
      'Encontrados:',
      test3.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 4: B√∫squeda por n√∫mero con formato
  console.log('üìù Test 4: B√∫squeda por n√∫mero con formato "+573001234567"')
  const test4 = PaginationMockService.searchWithPagination(
    mockClients,
    '+573001234567',
    pagination
  )
  const expected4 = 1 // Solo Juan P√©rez
  if (test4.data.length === expected4) {
    console.log('‚úÖ PAS√ì - Encontrados:', test4.data.length, 'resultados')
    console.log(
      '   Resultados:',
      test4.data.map(c => `${c.name} - ${c.phoneNumber}`)
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected4,
      'Encontrados:',
      test4.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 5: B√∫squeda por n√∫mero parcial
  console.log('üìù Test 5: B√∫squeda por n√∫mero parcial "300"')
  const test5 = PaginationMockService.searchWithPagination(
    mockClients,
    '300',
    pagination
  )
  const expected5 = 8 // Todos los clientes tienen n√∫meros que empiezan con 300
  if (test5.data.length === expected5) {
    console.log('‚úÖ PAS√ì - Encontrados:', test5.data.length, 'resultados')
    console.log(
      '   Resultados:',
      test5.data.map(c => `${c.name} - ${c.phoneNumber}`)
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected5,
      'Encontrados:',
      test5.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 6: B√∫squeda por nombre completo
  console.log('üìù Test 6: B√∫squeda por nombre completo "Juan P√©rez"')
  const test6 = PaginationMockService.searchWithPagination(
    mockClients,
    'Juan P√©rez',
    pagination
  )
  const expected6 = 1 // Solo Juan P√©rez
  if (test6.data.length === expected6) {
    console.log('‚úÖ PAS√ì - Encontrados:', test6.data.length, 'resultados')
    console.log(
      '   Resultados:',
      test6.data.map(c => c.name)
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected6,
      'Encontrados:',
      test6.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 7: B√∫squeda que no encuentra nada
  console.log('üìù Test 7: B√∫squeda que no encuentra nada "XYZ123"')
  const test7 = PaginationMockService.searchWithPagination(
    mockClients,
    'XYZ123',
    pagination
  )
  const expected7 = 0 // No deber√≠a encontrar nada
  if (test7.data.length === expected7) {
    console.log('‚úÖ PAS√ì - Encontrados:', test7.data.length, 'resultados')
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected7,
      'Encontrados:',
      test7.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 8: B√∫squeda vac√≠a
  console.log('üìù Test 8: B√∫squeda vac√≠a')
  const test8 = PaginationMockService.searchWithPagination(
    mockClients,
    '',
    pagination
  )
  const expected8 = 8 // Deber√≠a devolver todos los clientes
  if (test8.data.length === expected8) {
    console.log(
      '‚úÖ PAS√ì - Encontrados:',
      test8.data.length,
      'resultados (todos los clientes)'
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected8,
      'Encontrados:',
      test8.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 9: Filtro por mes de nacimiento
  console.log('üìù Test 9: Filtro por mes de nacimiento (Mayo - mes 5)')
  const test9 = PaginationMockService.filterByBirthMonthWithPagination(
    mockClients,
    5,
    pagination
  )
  const expected9 = 3 // Juan P√©rez (1990-05-15), Sof√≠a P√©rez (1993-05-20), Carmen P√©rez (1965-05-08)
  if (test9.data.length === expected9) {
    console.log('‚úÖ PAS√ì - Encontrados:', test9.data.length, 'resultados')
    console.log(
      '   Resultados:',
      test9.data.map(c => `${c.name} - ${c.birthDate.toLocaleDateString()}`)
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected9,
      'Encontrados:',
      test9.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Test 10: B√∫squeda case-insensitive
  console.log('üìù Test 10: B√∫squeda case-insensitive "juan"')
  const test10 = PaginationMockService.searchWithPagination(
    mockClients,
    'juan',
    pagination
  )
  const expected10 = 1 // Deber√≠a encontrar "Juan P√©rez"
  if (test10.data.length === expected10) {
    console.log('‚úÖ PAS√ì - Encontrados:', test10.data.length, 'resultados')
    console.log(
      '   Resultados:',
      test10.data.map(c => c.name)
    )
  } else {
    console.log(
      '‚ùå FALL√ì - Esperados:',
      expected10,
      'Encontrados:',
      test10.data.length
    )
    allTestsPassed = false
  }
  console.log('')

  // Resumen final
  console.log('=====================================')
  if (allTestsPassed) {
    console.log('üéâ ¬°TODAS LAS PRUEBAS PASARON!')
    console.log('‚úÖ El sistema de filtros est√° funcionando correctamente')
  } else {
    console.log('‚ùå ALGUNAS PRUEBAS FALLARON')
    console.log('‚ö†Ô∏è  El sistema de filtros necesita revisi√≥n')
  }
  console.log('=====================================')

  return allTestsPassed
}

// Ejecutar validaci√≥n si se llama directamente
if (typeof window !== 'undefined') {
  ;(window as any).validateFilterSystem = validateFilterSystem
}
